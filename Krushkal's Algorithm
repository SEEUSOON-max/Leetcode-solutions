#Minimum cost spanning tree using Disjoint sets in krushkals algo

#include<bits/stdc++.h>
using namespace std;

class Solution{
    
    struct node{
        int u,v,wt;
        node(int _u,int _v,int _wt){
            u = _u;
            v = _v;
            wt = _wt;
        }
    };
    static bool cmp(node a,node b){
        return a.wt < b.wt;
    }
    int findPar(int node,vector<int> &par){
        if(par[node] == node)
            return node;
        return par[node] = findPar(par[node],par);
    }
    void unionn(int u,int v,vector<int> &parent,vector<int> &rank){
        u = findPar(u, parent);
        v = findPar(v, parent);
        if(rank[u] < rank[v]){
            parent[u] = v;
        }
        else if(rank[v] < rank[u]){
            parent[v] = u;
        }
        else{
            parent[u] = v;
            rank[u]++;
        }
    }
	public:
    int spanningTree(int V, vector<vector<int>> adj[]){
        
        vector<node> edges;
        for(int i=0;i<V;i++){
            for(auto it : adj[i]){
                edges.push_back(node(i,it[0],it[1]));
            }
        }
        sort(edges.begin(),edges.end(),cmp);
        vector<int> parent(V);
        
        for(int i=0;i<V;i++)
            parent[i] = i;
        vector<int> rank(V,0);
        
        int cost = 0;
        for(auto it : edges){
            if(findPar(it.v,parent) != findPar(it.u,parent)){
                cost += it.wt;
                unionn(it.u,it.v,parent,rank);
            }
        }
        return cost;
    }
};

int main()
{
    int t;
    cin >> t;
    while (t--) {
        int V, E;
        cin >> V >> E;
        vector<vector<int>> adj[V];
        int i=0;
        while (i++<E) {
            int u, v, w;
            cin >> u >> v >> w;
            vector<int> t1,t2;
            t1.push_back(v);
            t1.push_back(w);
            adj[u].push_back(t1);
            t2.push_back(u);
            t2.push_back(w);
            adj[v].push_back(t2);
        }
        
        Solution obj;
    	cout << obj.spanningTree(V, adj) << "\n";
    }

    return 0;
}
